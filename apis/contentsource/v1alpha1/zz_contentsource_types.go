/*
Copyright 2023 Upbound Inc. - ANKASOFT
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ConfigObservation struct {
	Branch *string `json:"branch,omitempty" tf:"branch,omitempty"`

	ContentType *string `json:"contentType,omitempty" tf:"content_type,omitempty"`

	IntegrationID *string `json:"integrationId,omitempty" tf:"integration_id,omitempty"`

	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	ProjectName *string `json:"projectName,omitempty" tf:"project_name,omitempty"`

	Repository *string `json:"repository,omitempty" tf:"repository,omitempty"`
}

type ConfigParameters struct {

	// +kubebuilder:validation:Optional
	Branch *string `json:"branch,omitempty" tf:"branch,omitempty"`

	// +kubebuilder:validation:Optional
	ContentType *string `json:"contentType,omitempty" tf:"content_type,omitempty"`

	// +kubebuilder:validation:Required
	IntegrationID *string `json:"integrationId" tf:"integration_id,omitempty"`

	// +kubebuilder:validation:Required
	Path *string `json:"path" tf:"path,omitempty"`

	// +kubebuilder:validation:Required
	ProjectName *string `json:"projectName" tf:"project_name,omitempty"`

	// +kubebuilder:validation:Optional
	Repository *string `json:"repository,omitempty" tf:"repository,omitempty"`
}

type ContentSourceObservation struct {
	Config []ConfigObservation `json:"config,omitempty" tf:"config,omitempty"`

	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	CreatedBy *string `json:"createdBy,omitempty" tf:"created_by,omitempty"`

	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	LastUpdatedAt *string `json:"lastUpdatedAt,omitempty" tf:"last_updated_at,omitempty"`

	LastUpdatedBy *string `json:"lastUpdatedBy,omitempty" tf:"last_updated_by,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	OrgID *string `json:"orgId,omitempty" tf:"org_id,omitempty"`

	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	SyncEnabled *bool `json:"syncEnabled,omitempty" tf:"sync_enabled,omitempty"`

	TypeID *string `json:"typeId,omitempty" tf:"type_id,omitempty"`
}

type ContentSourceParameters struct {

	// +kubebuilder:validation:Optional
	Config []ConfigParameters `json:"config,omitempty" tf:"config,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// +crossplane:generate:reference:type=github.com/avarei/provider-vra/apis/project/v1alpha1.Project
	// +kubebuilder:validation:Optional
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Reference to a Project in project to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDRef *v1.Reference `json:"projectIdRef,omitempty" tf:"-"`

	// Selector for a Project in project to populate projectId.
	// +kubebuilder:validation:Optional
	ProjectIDSelector *v1.Selector `json:"projectIdSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	SyncEnabled *bool `json:"syncEnabled,omitempty" tf:"sync_enabled,omitempty"`

	// +kubebuilder:validation:Optional
	TypeID *string `json:"typeId,omitempty" tf:"type_id,omitempty"`
}

// ContentSourceSpec defines the desired state of ContentSource
type ContentSourceSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ContentSourceParameters `json:"forProvider"`
}

// ContentSourceStatus defines the observed state of ContentSource.
type ContentSourceStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ContentSourceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ContentSource is the Schema for the ContentSources API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vra}
type ContentSource struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.config)",message="config is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.name)",message="name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.syncEnabled)",message="syncEnabled is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.typeId)",message="typeId is a required parameter"
	Spec   ContentSourceSpec   `json:"spec"`
	Status ContentSourceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ContentSourceList contains a list of ContentSources
type ContentSourceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ContentSource `json:"items"`
}

// Repository type metadata.
var (
	ContentSource_Kind             = "ContentSource"
	ContentSource_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ContentSource_Kind}.String()
	ContentSource_KindAPIVersion   = ContentSource_Kind + "." + CRDGroupVersion.String()
	ContentSource_GroupVersionKind = CRDGroupVersion.WithKind(ContentSource_Kind)
)

func init() {
	SchemeBuilder.Register(&ContentSource{}, &ContentSourceList{})
}
